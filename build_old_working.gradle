buildscript {


	ext {
		springBootVersion = '1.3.5.RELEASE'
		//springBootVersion = '1.2.2.RELEASE'

		//springCloudStarterParentTrain = 'Brixton.M3'
		springCloudStarterParentTrain = 'Brixton.RELEASE'
		scsVersion = '1.0.2.RELEASE'
		//scsVersion = '1.1.0.RELEASE'
		sleuthVersion = '1.0.0.RC2'
		junitVersion = '4.12'
		thymeleafExtras = '2.1.2.RELEASE'
		dependencyPlugin = '0.5.3.RELEASE'
	}

	repositories {
		mavenCentral()
		//		added new url "https://repo.spring.io/libs-release/"

		maven { url "https://repo.spring.io/libs-release/"}
		maven { url "http://repo.spring.io/milestone" }
		maven { url "http://repo.spring.io/snapshot" }
		maven { url "https://plugins.gradle.org/m2/" }
	}

	dependencies {
		//classpath "io.spring.gradle:dependency-management-plugin:${dependencyPlugin}"
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
		classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.7"
		//classpath "io.spring.gradle:dependency-management-plugin:0.5.6.RELEASE"
		classpath("io.spring.gradle:dependency-management-plugin:0.5.7.RELEASE")
	}


}



repositories {
	mavenLocal()
	mavenCentral()
}

// Apply versioning to all projects from versioning script.
apply plugin: 'java'
apply plugin: 'jacoco'
apply from: "$projectDir/gradle/versioning.gradle"
apply plugin: 'eclipse'
apply plugin: "idea"
apply plugin: 'spring-boot'
apply plugin: "io.spring.dependency-management"
apply plugin: "com.gorylenko.gradle-git-properties"

println version

test { finalizedBy jacocoTestReport }

task manifestFilter(type: Copy) {
	from 'manifest-unversioned.yml'
	into "${buildDir}/"
	rename { String fileName ->
		fileName.replace('-unversioned', '')
	}
	expand(version: "${version}")
}

assemble { finalizedBy manifestFilter }

jacocoTestReport {
	group = "Reporting"
	description = "Generate Jacoco coverage reports after running tests."
	reports {

		csv.enabled false

		html{
			enabled true
			destination "${buildDir}/reports/jacoco"
		}

		xml.enabled false
	}

	additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
}


jacoco { toolVersion = "0.7.5+" //	reportsDir = file("$buildDir/customJacocoReportDir")
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "http://repo.spring.io/release" }
	maven { url "http://repo.spring.io/milestone" }
	maven { url "http://repo.spring.io/snapshot" }
}

dependencyManagement {
	imports { mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}" //mavenBom "org.springframework.cloud:spring-cloud-starter-parent:${springCloudStarterParentTrain}"
		     // mavenBom "org.springframework.cloud:spring-cloud-dependencies:Brixton.RELEASE"
		      //mavenBom 'org.springframework.cloud:spring-cloud-netflix:1.1.2.RELEASE'
		mavenBom "io.pivotal.spring.cloud:spring-cloud-services-dependencies:1.1.0.RELEASE"
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:Brixton.SR1"
		//mavenBom "org.springframework.cloud:spring-cloud-dependencies:Brixton.SR2"
		//mavenBom "org.springframework.cloud:spring-cloud-dependencies:Brixton.RELEASE"



	}

}
dependencies {

	// shared dependencies for all services
	//add new
//		compile("org.springframework.amqp:spring-rabbit:1.4.5.RELEASE")
//		compile("org.springframework.boot:spring-boot-starter-aop")
//		compile("org.springframework.cloud:spring-cloud-starter-hystrix")
//		compile("org.springframework.cloud:spring-cloud-netflix-hystrix-amqp:1.0.3.RELEASE")
//		compile('org.springframework.cloud:spring-cloud-stream-binder-rabbit')
//		compile('io.pivotal.spring.cloud:spring-cloud-services-cloudfoundry-connector:1.1.0.M5')
//		compile('io.pivotal.spring.cloud:spring-cloud-services-spring-connector:1.1.0.M5')
//
//		//older
		compile "org.springframework.boot:spring-boot-starter-web"
		compile "org.springframework.boot:spring-boot-starter-actuator"
		compile "org.springframework.cloud:spring-cloud-sleuth-stream"
		compile "org.springframework.cloud:spring-cloud-stream-binder-rabbit"
		compile "org.springframework.boot:spring-boot-starter-aop:${springBootVersion}"
		compile("io.pivotal.spring.cloud:spring-cloud-services-starter-circuit-breaker")
		compile("io.pivotal.spring.cloud:spring-cloud-services-starter-config-client")
		compile("io.pivotal.spring.cloud:spring-cloud-services-starter-service-registry")
	    //compile "io.pivotal.spring.cloud:spring-cloud-services-starter-config-client:${scsVersion}"
	    //compile "io.pivotal.spring.cloud:spring-cloud-services-starter-service-registry:${scsVersion}"
	// compile "io.pivotal.spring.cloud:spring-cloud-services-starter-circuit-breaker:${scsVersion}"
		compile "org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}"
		compile "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
		compile "org.thymeleaf.extras:thymeleaf-extras-springsecurity4:${thymeleafExtras}"

	//comment out
//	compile("org.springframework.cloud:spring-cloud-netflix-hystrix-amqp:1.0.3.RELEASE")
//    compile('io.pivotal.spring.cloud:spring-cloud-services-cloudfoundry-connector:1.1.0.M5')
//    compile('io.pivotal.spring.cloud:spring-cloud-services-spring-connector:1.1.0.M5')

//	compile("org.springframework.cloud:spring-cloud-netflix-hystrix-amqp")
//	compile("io.pivotal.spring.cloud:spring-cloud-services-cloudfoundry-connector")
//	compile("io.pivotal.spring.cloud:spring-cloud-services-spring-connector")

//	compile("org.springframework.amqp:spring-rabbit:1.4.5.RELEASE")
//	compile("org.springframework.boot:spring-boot-starter-web")
//	compile("org.springframework.boot:spring-boot-starter-actuator")
//	compile("org.springframework.boot:spring-boot-starter-aop")
//	compile("org.springframework.cloud:spring-cloud-starter-feign")
//	compile("org.springframework.cloud:spring-cloud-starter-eureka")
//	compile("org.springframework.cloud:spring-cloud-starter-hystrix")
//	compile("org.springframework.cloud:spring-cloud-netflix-hystrix-amqp:1.0.3.RELEASE")
//	compile("org.springframework.cloud:spring-cloud-starter-config")
//	compile("org.springframework.cloud:spring-cloud-sleuth-stream")
//	compile('org.springframework.cloud:spring-cloud-stream-binder-rabbit')
//	compile("io.pivotal.spring.cloud:spring-cloud-services-starter-config-client:1.1.0.M5")
//	compile('io.pivotal.spring.cloud:spring-cloud-services-cloudfoundry-connector:1.1.0.M5')
//	compile('io.pivotal.spring.cloud:spring-cloud-services-spring-connector:1.1.0.M5')
//	compile('io.pivotal.spring.cloud:cloudfoundry-certificate-truster:1.0.1.RELEASE')
//	compile "org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}"
//	compile "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
//	compile "org.thymeleaf.extras:thymeleaf-extras-springsecurity4:${thymeleafExtras}"
//	compile("com.google.code.gson:gson:2.3.1")
//	compile("com.launchdarkly:launchdarkly-client:1.0.1")
//	testCompile("org.springframework.boot:spring-boot-starter-test")

	//test packages
	testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
	testCompile "junit:junit:$junitVersion"

}
// process substitutions in yml files.
processResources {
	filesMatching("**/*.yml") { expand(project.properties) }
}

jar { baseName = 'web' }
description = "Web interface to the springboot set of services"

task wrapper(type: Wrapper) { gradleVersion = '2.12' }
